{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js","resources/value-converters/format-condition.js","resources/value-converters/format-date.js","resources/value-converters/format-unit.js"],"names":["App","defaultBindingMode","oneWay","i18n","au","signal","__","data","date","unit","records","city","country","temp","condition","subscribe","payload","languageChanged","lng","setLocale","unitChanged","uom","inject","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","instance","i18next","on","locale","setup","backend","loadPath","interpolation","format","value","parts","split","vc","resources","valueConverters","shift","toView","attributes","fallbackLng","developmentLogging","start","then","setRoot","forEach","globalResources","FormatConditionValueConverter","map","cond","tr","join","FormatDateValueConverter","FormatUnitValueConverter","val"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import moment from 'moment';\nimport {bindable, bindingMode, Aurelia} from 'aurelia-framework';\nimport {BindingSignaler} from 'aurelia-templating-resources';\nimport {I18N} from 'aurelia-i18n';\n\nexport class App {\n  static inject = [I18N, Aurelia, BindingSignaler];\n\n  @bindable({defaultBindingMode: bindingMode.oneWay}) unit = 0;\n  @bindable({defaultBindingMode: bindingMode.oneWay}) language = 'en';\n\n  constructor(i18n, au, signal) {\n    this.__ = {i18n, au, signal};\n\n    this.data = {\n      date : '2017-02-20',\n      unit : 0,\n      records : [\n        {\n          city : 'cities.0',\n          country : 'countries.BE',\n          data : [\n            { date : '2017-02-20', temp : 11, condition : 'B1'},\n            { date : '2017-02-21', temp : 12, condition : 'C1'},\n            { date : '2017-02-22', temp : 11, condition : 'B1:C1:D1'},\n          ]\n        }, {\n          city : 'cities.1',\n          country : 'countries.UK',\n          data : [\n            { date : '2017-02-20', temp : 14, condition : 'B1'},\n            { date : '2017-02-21', temp : 12, condition : 'B1:C2'},\n            { date : '2017-02-22', temp : 12, condition : 'C2'},\n          ]\n        }, {\n          city : 'cities.2',\n          country : 'countries.ES',\n          data : [\n            { date : '2017-02-20', temp : 14, condition : 'B1'},\n            { date : '2017-02-21', temp : 16, condition : 'A1:B1'},\n            { date : '2017-02-22', temp : 16, condition : 'A1:B2'},\n          ]\n        },\n      ]\n    };\n\n    this.__.au.subscribe('i18n:locale:changed', (payload) => {\n      this.__.signal.signal('language-signal');\n    });\n  }\n\n  languageChanged (lng) {\n    this.__.i18n.setLocale(lng);\n  }\n\n  unitChanged (uom) {\n    this.data.unit = uom;\n    this.__.signal.signal('unit-signal');\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport {I18N} from 'aurelia-i18n';\nimport I18N_XHR from 'i18next-xhr-backend';\nimport moment from 'moment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use.standardConfiguration();\n  aurelia.use.feature('resources');\n\n  //  Setup i18n\n  aurelia.use.plugin('aurelia-i18n', (instance) => {\n    instance.i18next.use(I18N_XHR);\n\n    // catch the event and make changes accordingly\n    instance.i18next.on('languageChanged', (lng) => {\n      moment.locale(lng);\n    });\n\n    return instance.setup({\n      backend : {\n        loadPath : '/locales/{{lng}}/{{ns}}.json',\n      },\n      interpolation : {\n        format : function (value, format, lng) {\n          const parts = format.split(':');\n\n          //  Check if the value converter is registered as a resource\n          const vc = aurelia.resources.valueConverters[parts.shift()];\n\n          return vc ? vc.toView(value, ...parts) : value;\n        },\n      },\n      lng : 'en',\n      attributes : ['t', 'i18n'],\n      fallbackLng : 'en',\n      debug : true\n    });\n  });\n\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(au) {\n  //  Hook up value converters\n  [\n    'format-date',\n    'format-unit',\n    'format-condition',\n  ].forEach((vc) => au.globalResources(`./value-converters/${vc}`));\n}\n","import {I18N} from 'aurelia-i18n';\n\nexport class FormatConditionValueConverter {\n  static inject = [I18N];\n\n  constructor (i18n) {\n    this.__ = {i18n};\n  }\n\n  toView (value, format) {\n    return value\n      .split(':')\n      .map((cond) => this.__.i18n.tr(`weather.conditions.${cond}`))\n      .join(', ');\n  }\n}\n","import moment from 'moment';\n\nexport class FormatDateValueConverter {\n  toView (value, format) {\n    return moment(value, 'YYYY-MM-DD').format(format);\n  }\n}\n","export class FormatUnitValueConverter {\n  toView (temp) {\n    if (!temp) return '';\n    //  Base is centigrade (0)\n    //  1 -> kelvin\n    //  2 -> fahrenheit\n    return ({\n      0 : () => `${temp.val} °C`,\n      1 : () => `${temp.val + 273.15} °K`,\n      2 : () => `${(temp.val*1.8) + 32} °F`,\n    }[temp.unit])();\n  }\n}\n"],"sourceRoot":"../src"}